*************************************
** BEGIN PuCollPri.ddck
*************************************

*************************************
** ABOUT
** This control controls the pump on the primary side of the solar collector HX. It tries to keep the collector outlet temperature
** `CollTOut` at the set point temperature `TOutSet` by numerical optimization utilizing TRNSYS iterations (Type 22).
** 
** In addition, the pump is only run if incident total radiation `IT_kW` is above a certain threshold `ITMin_Wm2` and if the
** collector output temperature can be kept below a given threshold `TOutMax`.
*************************************

*************************************
** Control
*************************************
CONSTANTS #
MMax = 2*$CollMNom
TOutSet = 110
ITMin_Wm2 = 200


***********************************
** Radiation control
***********************************

EQUATIONS #
radiationOn = GT($CollIT_Wm2, ITMin_Wm2)


***********************************
** Temperature control
***********************************
EQUATIONS #
on = radiationOn*temperatureOn*NOT(coolDown)


UNIT 110 TYPE 22
PARAMETERS #
0               ! 1: Ignored
15               ! 2: Permitted number of iterations: 0: use global TRNSYS constants
INPUTS #
0,0             ! 1: Set point
$CollTOut       ! 2: Controlled variable
on              ! 3: On/off signal
0,0             ! 4: Minumum control signal
0,0             ! 5: Maximum control signal
0,0             ! 6: Non-zero output threshold
0,0             ! 7: Tracking error tolerance, < 0 => relative, >= 0 => absolute
**
TOutSet         ! 1: Set point
TOutSet         ! 2: Controlled variable
1               ! 3: On/off signal
0               ! 4: Minumum control signal
MMax            ! 5: Maximum control signal
0               ! 6: Non-zero output threshold
-0.5            ! 7: Tracking error tolerance, > 0 => relative, < 0 => absolute

EQUATIONS #
stat  = [110,3]
stuck = MOD(INT(stat/16),2)
constrMin = MOD(INT(stat/4),2)
constrMax = MOD(INT(stat/8),2)
tooSteep = MOD(INT(stat/64),2)
withinTol = MOD(INT(stat/32),2)
temperatureOn = NOT(constrMax)


***********************************
** cool down period
***********************************

UNIT 111 TYPE 21 ! Time values
PARAMETERS #
1       ! 1: Mode: 1 (ignored)
0       ! 2: Relative or absolute time: 0 => absolute, 1 => relative

EQUATIONS #
hourOfDay = [111,11]

UNIT 112 TYPE 150 ! Recall
PARAMETERS #
1
1 0
INPUTS #
coolDown
0

EQUATIONS #
coolDownRec = [112,1]

EQUATIONS #
isMidnight = EQL(hourOfDay,1)
coolDown = NOT(temperatureOn) + temperatureOn*(coolDownRec*NOT(isMidnight))


***********************************
** Combined control & output
***********************************

EQUATIONS #
$MfrPuCollPri = [110,1]


***********************************
** Online Plotter
***********************************
UNIT 103 TYPE 65		!Changed automatically
PARAMETERS #     
3     				! 1: Nb. of left-axis variables
7    				! 2: Nb. of right-axis variables
0     				! 3: Left axis minimum
500     			! 4: Left axis maximum
-1   				! 5: Right axis minimum
100  				! 6: Right axis maximum
$nPlotsPerSim		! 7: Number of plots per simulation
12     				! 8: X-axis gridpoints
1     				! 9: Shut off Online w/o removing
-1     				! 10: Logical unit for output file
0     				! 11: Output file units
0     				! 12: Output file delimiter
INPUTS #    
$MfrPuCollPri $CollIT_Wm2 ITMin_Wm2 $CollTIn $CollTOut on coolDown coolDownRec isMidnight temperatureOn
$MfrPuCollPri $CollIT_Wm2 ITMin_Wm2 $CollTIn $CollTOut on coolDown coolDownRec isMidnight temperatureOn
LABELS #     
"mass flows [kg/h] and insolation [W/m2]"
"temperatures [deg C] and statuses [1]"
"primary collector loop control"

*******************************
** END PuCollPri.ddck
*******************************
